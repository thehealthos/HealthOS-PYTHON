# -*- coding: utf-8 -*-

"""
    healthoslib.controllers.medicines_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 02/18/2017
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.o_auth_2 import OAuth2

class MedicinesController(BaseController):

    """A Controller to access Endpoints in the healthoslib API."""
    

    def get_manufacturer(self,
                         manufacturer_id):
        """Does a GET request to /medicines/manufacturers/{manufacturer_id}.

        Get a manufacturer by its id

        Args:
            manufacturer_id (string): Id of the manufacturer

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/manufacturers/{manufacturer_id}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'manufacturer_id': manufacturer_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def search_manufacturers(self,
                             manufacturer_query):
        """Does a GET request to /search/medicines/manufacturers/{manufacturer_query}.

        Search a manufacturer by its name

        Args:
            manufacturer_query (string): TODO: type description here. Example:
                
        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/search/medicines/manufacturers/{manufacturer_query}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'manufacturer_query': manufacturer_query
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_common_side_effects(self,
                                medicine_id):
        """Does a GET request to /medicines/brands/{medicine_id}/side_effects.

        Get common side effects of a medicine

        Args:
            medicine_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands/{medicine_id}/side_effects'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_id': medicine_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_popular_usage(self,
                          medicine_id):
        """Does a GET request to /medicines/brands/{medicine_id}/usages.

        Get popular usages of a medicine

        Args:
            medicine_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands/{medicine_id}/usages'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_id': medicine_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_medicines_by_manufacturer(self,
                                      page,
                                      size,
                                      manufacturer_id):
        """Does a GET request to /medicines/manufacturers/{manufacturer_id}/medicines.

        Get medicines by a manufacturer

        Args:
            page (int): TODO: type description here. Example: 
            size (int): TODO: type description here. Example: 
            manufacturer_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/manufacturers/{manufacturer_id}/medicines'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'manufacturer_id': manufacturer_id
        })
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'page': page,
            'size': size
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_similar_medicines(self,
                              medicine_id):
        """Does a GET request to /medicines/brands/{medicine_id}/similar.

        Get similar medicines

        Args:
            medicine_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands/{medicine_id}/similar'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_id': medicine_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_medicine(self,
                     medicine_id):
        """Does a GET request to /medicines/brands/{medicine_id}.

        Get a medicine

        Args:
            medicine_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands/{medicine_id}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_id': medicine_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_all_medicines(self,
                          page,
                          size):
        """Does a GET request to /medicines/brands.

        Get all medicines

        Args:
            page (int): TODO: type description here. Example: 
            size (int): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands'
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'page': page,
            'size': size
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def search_medicines(self,
                         medicine_query):
        """Does a GET request to /search/medicines/brands/{medicine_query}.

        Search a medicine by name

        Args:
            medicine_query (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/search/medicines/brands/{medicine_query}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_query': medicine_query
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_all_manufacturers(self,
                              page,
                              size):
        """Does a GET request to /medicines/manufacturers.

        Get all manufacturers

        Args:
            page (int): TODO: type description here. Example: 
            size (int): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/manufacturers'
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'page': page,
            'size': size
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_alternative_medicines(self,
                                  page,
                                  size,
                                  medicine_id):
        """Does a GET request to /medicines/brands/{medicine_id}/alternatives.

        Get substitutes of a medicine

        Args:
            page (int): TODO: type description here. Example: 
            size (int): TODO: type description here. Example: 
            medicine_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri.format(Configuration.host)
        _query_builder += '/medicines/brands/{medicine_id}/alternatives'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'medicine_id': medicine_id
        })
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'page': page,
            'size': size
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)        
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)
